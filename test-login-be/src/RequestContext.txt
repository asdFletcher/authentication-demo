equestContext {
  _events: [Object: null prototype] { bind: [Function], unbind: [Function] },
  _eventsCount: 2,
  _maxListeners: Infinity,
  registry: Map {
    'middleware.http.context' => Binding {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      isLocked: true,
      tagMap: {},
      key: 'middleware.http.context',
      _source: [Object],
      _getValue: [Function]
    },
    'rest.http.request' => Binding {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      isLocked: true,
      tagMap: {},
      key: 'rest.http.request',
      _source: [Object],
      _getValue: [Function]
    },
    'rest.http.response' => Binding {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      isLocked: true,
      tagMap: {},
      key: 'rest.http.response',
      _source: [Object],
      _getValue: [Function]
    },
    'rest.http.request.context' => Binding {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      isLocked: true,
      tagMap: {},
      key: 'rest.http.request.context',
      _source: [Object],
      _getValue: [Function],
      _cache: [WeakMap]
    }
  },
  _parent: RestServer {
    _events: [Object: null prototype] { bind: [Array], unbind: [Array] },
    _eventsCount: 2,
    _maxListeners: Infinity,
    registry: Map {
      'rest.port' => [Binding],
      'rest.host' => [Binding],
      'rest.path' => [Binding],
      'rest.protocol' => [Binding],
      'rest.httpsOptions' => [Binding],
      'rest.basePath' => [Binding],
      'rest.handler' => [Binding],
      'routes.get %2Fexplorer' => [Binding],
      'routes.get %2Fexplorer%2F' => [Binding],
      'routes.get %2Fexplorer%2Fopenapi%2Ejson' => [Binding],
      'middleware.cors' => [Binding],
      'middleware.apiSpec.defaults' => [Binding],
      'routes.get %2Fhello' => [Binding],
      'routes.get %2Fping' => [Binding],
      'routes.post %2Fusers' => [Binding],
      'routes.get %2Fusers' => [Binding],
      'routes.patch %2Fusers' => [Binding],
      'routes.get %2Fusers%2Fcount' => [Binding],
      'routes.get %2Fusers%2F%7Bid%7D' => [Binding],
      'routes.patch %2Fusers%2F%7Bid%7D' => [Binding],
      'routes.put %2Fusers%2F%7Bid%7D' => [Binding],
      'routes.delete %2Fusers%2F%7Bid%7D' => [Binding],
      'rest.url' => [Binding]
    },
    _parent: Lb4Test1Application {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: Infinity,
      registry: [Map],
      _parent: undefined,
      name: 'Lb4Test1Application-TUwiemdNTkyN8KEm_9aprA-0',
      tagIndexer: [ContextTagIndexer],
      subscriptionManager: [ContextSubscriptionManager],
      _debug: [Function],
      _isShuttingDown: false,
      _state: 'started',
      options: [Object],
      _shutdownOptions: [Object],
      configResolver: [DefaultConfigurationResolver],
      projectRoot: '/Users/fletcher/programming/projects/test-login/test-login-be/dist',
      bootOptions: [Object],
      _signalListener: [AsyncFunction]
    },
    name: 'RestServer-TUwiemdNTkyN8KEm_9aprA-1',
    tagIndexer: ContextTagIndexer {
      context: [Circular],
      bindingsIndexedByTag: [Map],
      bindingEventListener: [Function],
      tagIndexListener: [Function]
    },
    subscriptionManager: ContextSubscriptionManager {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: Infinity,
      context: [Circular],
      pendingNotifications: 0,
      _observers: [Set],
      _parentContextEventListener: [Function],
      notificationQueue: [Object]
    },
    _debug: [Function: debug] {
      namespace: 'loopback:context:restserver',
      enabled: false,
      useColors: true,
      color: 171,
      destroy: [Function: destroy],
      extend: [Function: extend],
      inspectOpts: {}
    },
    _externalRoutes: ExternalExpressRoutes {
      _externalRoutes: [Function],
      _staticRoutes: [Function],
      _specForExternalRoutes: [Object]
    },
    config: {
      port: 5000,
      openApiSpec: [Object],
      apiExplorer: [Object],
      cors: [Object],
      expressSettings: {},
      router: {},
      listenOnStart: true,
      host: undefined,
      gracePeriodForClose: 5000,
      basePath: ''
    },
    _basePath: '',
    _expressApp: [Function: app] EventEmitter {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      setMaxListeners: [Function: setMaxListeners],
      getMaxListeners: [Function: getMaxListeners],
      emit: [Function: emit],
      addListener: [Function: addListener],
      on: [Function: addListener],
      prependListener: [Function: prependListener],
      once: [Function: once],
      prependOnceListener: [Function: prependOnceListener],
      removeListener: [Function: removeListener],
      off: [Function: removeListener],
      removeAllListeners: [Function: removeAllListeners],
      listeners: [Function: listeners],
      rawListeners: [Function: rawListeners],
      listenerCount: [Function: listenerCount],
      eventNames: [Function: eventNames],
      init: [Function: init],
      defaultConfiguration: [Function: defaultConfiguration],
      lazyrouter: [Function: lazyrouter],
      handle: [Function: handle],
      use: [Function: use],
      route: [Function: route],
      engine: [Function: engine],
      param: [Function: param],
      set: [Function: set],
      path: [Function: path],
      enabled: [Function: enabled],
      disabled: [Function: disabled],
      enable: [Function: enable],
      disable: [Function: disable],
      acl: [Function],
      bind: [Function],
      checkout: [Function],
      connect: [Function],
      copy: [Function],
      delete: [Function],
      get: [Function],
      head: [Function],
      link: [Function],
      lock: [Function],
      'm-search': [Function],
      merge: [Function],
      mkactivity: [Function],
      mkcalendar: [Function],
      mkcol: [Function],
      move: [Function],
      notify: [Function],
      options: [Function],
      patch: [Function],
      post: [Function],
      propfind: [Function],
      proppatch: [Function],
      purge: [Function],
      put: [Function],
      rebind: [Function],
      report: [Function],
      search: [Function],
      source: [Function],
      subscribe: [Function],
      trace: [Function],
      unbind: [Function],
      unlink: [Function],
      unlock: [Function],
      unsubscribe: [Function],
      all: [Function: all],
      del: [Function],
      render: [Function: render],
      listen: [Function: listen],
      request: [IncomingMessage],
      response: [ServerResponse],
      cache: {},
      engines: {},
      settings: [Object],
      locals: [Object: null prototype],
      mountpath: '/',
      _router: [Function]
    },
    _requestHandler: [Function: app] EventEmitter {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      setMaxListeners: [Function: setMaxListeners],
      getMaxListeners: [Function: getMaxListeners],
      emit: [Function: emit],
      addListener: [Function: addListener],
      on: [Function: addListener],
      prependListener: [Function: prependListener],
      once: [Function: once],
      prependOnceListener: [Function: prependOnceListener],
      removeListener: [Function: removeListener],
      off: [Function: removeListener],
      removeAllListeners: [Function: removeAllListeners],
      listeners: [Function: listeners],
      rawListeners: [Function: rawListeners],
      listenerCount: [Function: listenerCount],
      eventNames: [Function: eventNames],
      init: [Function: init],
      defaultConfiguration: [Function: defaultConfiguration],
      lazyrouter: [Function: lazyrouter],
      handle: [Function: handle],
      use: [Function: use],
      route: [Function: route],
      engine: [Function: engine],
      param: [Function: param],
      set: [Function: set],
      path: [Function: path],
      enabled: [Function: enabled],
      disabled: [Function: disabled],
      enable: [Function: enable],
      disable: [Function: disable],
      acl: [Function],
      bind: [Function],
      checkout: [Function],
      connect: [Function],
      copy: [Function],
      delete: [Function],
      get: [Function],
      head: [Function],
      link: [Function],
      lock: [Function],
      'm-search': [Function],
      merge: [Function],
      mkactivity: [Function],
      mkcalendar: [Function],
      mkcol: [Function],
      move: [Function],
      notify: [Function],
      options: [Function],
      patch: [Function],
      post: [Function],
      propfind: [Function],
      proppatch: [Function],
      purge: [Function],
      put: [Function],
      rebind: [Function],
      report: [Function],
      search: [Function],
      source: [Function],
      subscribe: [Function],
      trace: [Function],
      unbind: [Function],
      unlink: [Function],
      unlock: [Function],
      unsubscribe: [Function],
      all: [Function: all],
      del: [Function],
      render: [Function: render],
      listen: [Function: listen],
      request: [IncomingMessage],
      response: [ServerResponse],
      cache: {},
      engines: {},
      settings: [Object],
      locals: [Object: null prototype],
      mountpath: '/',
      _router: [Function]
    },
    _routesEventSubscription: ContextSubscription {
      context: [Circular],
      observer: [Object],
      _closed: false
    },
    _httpHandler: HttpHandler {
      _rootContext: [Circular],
      _serverConfig: [Object],
      _routes: [RoutingTable],
      handleRequest: [Function],
      _openApiComponents: [Object]
    },
    _httpServer: HttpServer {
      _listening: true,
      requestListener: [EventEmitter],
      serverOptions: [Object],
      _protocol: 'http',
      server: [Server],
      _address: [Object]
    }
  },
  name: 'RequestContext-TUwiemdNTkyN8KEm_9aprA-3',
  tagIndexer: ContextTagIndexer {
    context: [Circular],
    bindingsIndexedByTag: Map {},
    bindingEventListener: [Function],
    tagIndexListener: [Function]
  },
  subscriptionManager: ContextSubscriptionManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: Infinity,
    context: [Circular],
    pendingNotifications: 0
  },
  _debug: [Function: debug] {
    namespace: 'loopback:context:requestcontext',
    enabled: false,
    useColors: true,
    color: 220,
    destroy: [Function: destroy],
    extend: [Function: extend],
    inspectOpts: {}
  },
  request: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: true,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      paused: true,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrain: 0,
      readingMore: true,
      decoder: null,
      encoding: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [ServerResponse],
      [Symbol(asyncId)]: 104,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2714,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 105,
        [Symbol(triggerId)]: 104
      },
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [ServerResponse],
      [Symbol(asyncId)]: 104,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2714,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 105,
        [Symbol(triggerId)]: 104
      },
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: true,
    headers: {
      'cache-control': 'no-cache',
      'postman-token': 'e6c5876e-a4c3-416e-a443-9e2e4e665a9f',
      'user-agent': 'PostmanRuntime/7.6.0',
      accept: '*/*',
      host: 'localhost:5000',
      cookie: 'auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVjM2ZlZWE1ODQ2N2ZmMmY5OGU5Yjk3ZiIsInJvbGUiOiJ1c2VyIiwidHlwZSI6InVzZXIiLCJpYXQiOjE1NDc3MDI2NjQsImV4cCI6MTU0NzcwMjY3NH0.1pBFGDx5rElCgcArgTplFtKvvU3oRxXhNHQ_AnsjmIw',
      'accept-encoding': 'gzip, deflate',
      connection: 'keep-alive'
    },
    rawHeaders: [
      'cache-control',
      'no-cache',
      'Postman-Token',
      'e6c5876e-a4c3-416e-a443-9e2e4e665a9f',
      'User-Agent',
      'PostmanRuntime/7.6.0',
      'Accept',
      '*/*',
      'Host',
      'localhost:5000',
      'cookie',
      'auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVjM2ZlZWE1ODQ2N2ZmMmY5OGU5Yjk3ZiIsInJvbGUiOiJ1c2VyIiwidHlwZSI6InVzZXIiLCJpYXQiOjE1NDc3MDI2NjQsImV4cCI6MTU0NzcwMjY3NH0.1pBFGDx5rElCgcArgTplFtKvvU3oRxXhNHQ_AnsjmIw',
      'accept-encoding',
      'gzip, deflate',
      'Connection',
      'keep-alive'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/ping',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [ServerResponse],
      [Symbol(asyncId)]: 104,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2714,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 105,
        [Symbol(triggerId)]: 104
      },
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/ping',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/ping',
      path: '/ping',
      href: '/ping',
      _raw: '/ping'
    },
    params: {},
    query: {},
    res: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      socket: [Socket],
      connection: [Socket],
      _header: null,
      _onPendingData: [Function: bound updateOutgoingData],
      _sent100: false,
      _expect_continue: false,
      req: [Circular],
      locals: [Object: null prototype] {},
      __onFinished: [Function],
      [Symbol(kNeedDrain)]: false,
      [Symbol(isCorked)]: false,
      [Symbol(kOutHeaders)]: [Object: null prototype]
    }
  },
  response: ServerResponse {
    _events: [Object: null prototype] {
      finish: [Array],
      end: [Function: onevent]
    },
    _eventsCount: 2,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 104,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2714,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 105,
        [Symbol(triggerId)]: 104
      },
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 104,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2714,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 105,
        [Symbol(triggerId)]: 104
      },
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: null,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: IncomingMessage {
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      socket: [Socket],
      connection: [Socket],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: [Object],
      rawHeaders: [Array],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/ping',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: [Socket],
      _consuming: false,
      _dumped: false,
      next: [Function: next],
      baseUrl: '',
      originalUrl: '/ping',
      _parsedUrl: [Url],
      params: {},
      query: {},
      res: [Circular]
    },
    locals: [Object: null prototype] {},
    __onFinished: [Function: listener] { queue: [Array] },
    [Symbol(kNeedDrain)]: false,
    [Symbol(isCorked)]: false,
    [Symbol(kOutHeaders)]: [Object: null prototype] { 'x-powered-by': [Array] }
  },
  serverConfig: {
    port: 5000,
    openApiSpec: { setServersFromRequest: true, endpointMapping: [Object] },
    apiExplorer: { disabled: true },
    cors: {
      origin: '*',
      methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
      preflightContinue: false,
      optionsSuccessStatus: 204,
      maxAge: 86400,
      credentials: true
    },
    expressSettings: {},
    router: {},
    listenOnStart: true,
    host: undefined,
    gracePeriodForClose: 5000,
    basePath: ''
  }
}
